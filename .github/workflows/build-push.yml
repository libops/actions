name: build-push-ar
on:
  workflow_call:
    inputs:
      image:
        required: false
        type: string
        default: ""
      build-args:
        required: false
        type: string
        default: ""
      context:
        required: false
        type: string
        default: "."
      tag:
        required: false
        type: string
        default: ""
      runners:
        required: false
        type: string
        default: '["ubuntu-24.04", "ubuntu-24.04-arm"]'
jobs:
  build:
    strategy:
      matrix:
        runner: ${{ fromJSON(inputs.runners) }}
    name: build-${{ matrix.runner }}
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 15
    outputs:
      image-tag: ${{ steps.record-tag.outputs.tag }}
    steps:
      - name: validate input
        run: |
          regex='^([A-Za-z.\/\-]+)?$'
          if [[ "${{ inputs.image }}" =~ $regex ]]; then
            echo "Valid docker image name"
          else
            echo "Invalid docker image name"
            exit 1
          fi
          if [[ "${{ inputs.context }}" =~ $regex ]]; then
            echo "Valid docker context"
          else
            echo "Invalid docker context"
            exit 1
          fi

      - name: ghcr Login
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
        with:
          repository: libops/actions
          path: actions
          sparse-checkout: |
            ci/gha-extract-docker-vars.sh
          sparse-checkout-cone-mode: false

      - run: ./actions/ci/gha-extract-docker-vars.sh
        id: vars
        env:
          GCLOUD_PROJECT: ${{ secrets.GCLOUD_PROJECT }}
          DOCKER_IMAGE: GHCR
          TAG: ${{ inputs.tag }}
          DOCKER_PASSED_CONTEXT: ${{ inputs.context }}

      - uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3

      - name: build+push GHCR
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
        with:
          context: ${{ inputs.context }}
          push: true
          cache-from: ${{ steps.vars.outputs.cache-from }}
          cache-to: ${{ steps.vars.outputs.cache-to }}
          tags: |
            ${{ steps.vars.outputs.image }}:${{ steps.vars.outputs.tag }}-${{ steps.vars.outputs.platform }}

      - name: record image tag
        id: record-tag
        run: |
          echo "tag=${{ steps.vars.outputs.image }}:${{ steps.vars.outputs.tag }}-${{ steps.vars.outputs.platform }}" >> $GITHUB_OUTPUT
  merge:
    runs-on: ubuntu-24.04
    needs:
      - build
    steps:
      - name: ghcr Login
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@c200f3691d83b41bf9bbd8638997a462592937ed" # v2
        with:
          workload_identity_provider: ${{ secrets.GCLOUD_OIDC_POOL }}
          create_credentials_file: true
          service_account: ${{ secrets.GSA }}
          token_format: "access_token"

      - uses: "docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef" # v3
        name: "GAR login"
        with:
          registry: "us-docker.pkg.dev"
          username: "oauth2accesstoken"
          password: "${{ steps.auth.outputs.access_token }}"

      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
        with:
          repository: libops/actions
          path: actions
          sparse-checkout: |
            ci/gha-extract-docker-vars.sh
          sparse-checkout-cone-mode: false

      - run: ./actions/ci/gha-extract-docker-vars.sh
        id: vars
        env:
          GCLOUD_PROJECT: ${{ secrets.GCLOUD_PROJECT }}
          DOCKER_IMAGE: ${{ inputs.image }}
          TAG: ${{ inputs.tag }}
          DOCKER_PASSED_CONTEXT: ${{ inputs.context }}

      - uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3

      - name: merge platform images
        run: |
          tags=""
          mapfile -t runners < <(echo '${{ inputs.runners }}' | jq -r '.[]')
          for runner in "${runners[@]}"; do
            RUNNER_ARCH="X64"
            if [[ "$runner" == *"arm"* ]]; then
              RUNNER_ARCH="ARM64"
            fi
            DOCKER_IMAGE=GHCR GITHUB_OUTPUT=/tmp/vars_${runner}.txt ./actions/ci/gha-extract-docker-vars.sh
            image=$(grep "^image=" /tmp/vars_${runner}.txt | cut -d'=' -f2)
            tag=$(grep "^tag=" /tmp/vars_${runner}.txt | cut -d'=' -f2)
            platform=$(grep "^platform=" /tmp/vars_${runner}.txt | cut -d'=' -f2)

            tags="$tags ${image}:${tag}-${platform}"
          done

          echo "$tags"

          docker buildx imagetools create \
            -t "${{ steps.vars.outputs.image }}:${{ steps.vars.outputs.tag }}" \
            $tags
        env:
          DOCKER_IMAGE: ${{ steps.vars.outputs.image }}
          TAG: ${{ steps.vars.outputs.tag }}
          DOCKER_PASSED_CONTEXT: ${{ inputs.context }}
          GCLOUD_PROJECT: ${{ secrets.GCLOUD_PROJECT }}
